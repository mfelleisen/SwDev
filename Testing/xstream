#! /bin/sh
#|
exec racket -tm "$0" ${1+"$@"}
|#
#lang racket

;; echo valid JSON expressions from STDIN to STDOUT, end with {"count":n}
;; EFFECT fail on invalid 

(provide main)

;; -----------------------------------------------------------------------------
(require json)

(define (main [n 0])
  (define line (read-json))
  (cond
    [(eof-object? line) (write-json (hasheq 'count n)) (newline)]
    [else (write-json line) (flush-output) (newline) (main (+ n 1))]))

;; -----------------------------------------------------------------------------
(module+ test
  (require rackunit (submod  "common.rkt" test))
  (write-out-tests #t)
  (testing main)
  
  (define one '("]" 1))
  (define two '("[" 2))
  (define thr (hasheq 'a 3))

  (define (run msg . a)
    (define count (append a (list (hasheq 'count (length a)))))
    (run-write-json-test (apply make-test a) (apply make-test count) msg))
  
  (run "empty sequence")
  (run "one array" one)
  (run "two arrays" one two)
  (run "two arrays, one object" one two thr)
  (run "one value, one array, one object" "a" one thr))
  
